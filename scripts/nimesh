#!/usr/bin/env python

import argparse

import vtk

import nimesh


def view(filename, freesurfer=None, segmentation=None):
    """View a mesh from file or freesurfer directory."""

    # Create the mesh and display it.
    if freesurfer:
        mesh = nimesh.from_freesurfer(filename, *freesurfer)
    else:
        mesh = nimesh.io.load(filename)

    view_mesh(mesh, segmentation)


def view_mesh(mesh: nimesh.Mesh, segmentation: str = None):
    """Displays a mesh in an interactive window.

    Displays a mesh in an interactive window. This function is intended to be
    used as a quality assurrance tool, and not for full featured visualization.

    Args:
        mesh: The mesh to view.
        segmentation: The segmentation to use for colors.

    """

    # Create a new vtk renderer and rendering window.
    renderer = vtk.vtkRenderer()
    renderer.SetViewport(0.0, 0.0, 1.0, 1.0)
    renderer.SetBackground(0.0, 0.0, 0.0)
    rendering_window = vtk.vtkRenderWindow()
    rendering_window.AddRenderer(renderer)

    # Allow the user to interact with the mesh.
    interactor = vtk.vtkRenderWindowInteractor()
    interactor.SetRenderWindow(rendering_window)
    interactor.SetInteractorStyle(
        vtk.vtkInteractorStyleTrackballCamera())

    # Transfer the meshes vertices to the vtk format.
    points = vtk.vtkPoints()
    for vertex in mesh.vertices:
        points.InsertNextPoint(*vertex)

    # Create the triangles of the surface.
    triangles = vtk.vtkCellArray()
    for triangle in mesh.triangles:
        vtk_triangle = vtk.vtkTriangle()
        vtk_triangle.GetPointIds().SetId(0, triangle[0])
        vtk_triangle.GetPointIds().SetId(1, triangle[1])
        vtk_triangle.GetPointIds().SetId(2, triangle[2])
        triangles.InsertNextCell(vtk_triangle)

    # Create the poly data, mapper, and actor.
    polydata = vtk.vtkPolyData()
    polydata.SetPoints(points)
    polydata.SetPolys(triangles)

    # Use the color from the segmentation if it was provided.
    if segmentation is not None:
        segmentation = next(s for s in mesh.segmentations if s.name ==
                            segmentation)
        colors = vtk.vtkUnsignedCharArray()
        colors.SetNumberOfComponents(3)
        colors.SetName('colors')
        for key in segmentation.keys:
            if key == -1:
                color = (0, 0, 0)
            else:
                color = segmentation._labels[key].color[:3]

            colors.InsertNextTuple3(*color)

        polydata.GetPointData().SetScalars(colors)

    mapper = vtk.vtkPolyDataMapper()
    mapper.SetInputData(polydata)

    actor = vtk.vtkActor()
    actor.SetMapper(mapper)
    actor.GetProperty().SetSpecular(0.0)
    actor.GetProperty().SetDiffuse(0.5)
    actor.GetProperty().SetAmbient(0.5)

    # Add the actor to the renderer.
    renderer.AddActor(actor)

    # Start rendering.
    rendering_window.Render()
    interactor.Start()

    # Cleanup when the user closes the window.
    rendering_window.Finalize()
    interactor.TerminateApp()


if __name__ == '__main__':

    # Create the argument parser.
    parser = argparse.ArgumentParser()
    subparsers = parser.add_subparsers()

    # The view subparser.
    view_parser = subparsers.add_parser('view')
    view_parser.add_argument(
        'filename', metavar='FILENAME',
        help='STR The file that contains the mesh to display. In the case of '
             'a FreeSurfer mesh, can also be a directory (see the '
             '--freesurfer option).')
    view_parser.add_argument(
        '--freesurfer', metavar=('HEMISPHERE', 'SURFACE'), nargs=2,
        help='STR STR Specifies the hemisphere (lh or rh) and the surface '
             'type (pial, white, or inflated) to view. Only useful if the '
             'filename is a FreeSurfer directory.')
    view_parser.add_argument(
        '--segmentation', metavar='NAME',
        help='STR The name of the segmentation used to color the surface.')
    view_parser.set_defaults(func=view)

    args = parser.parse_args()
    parameters = {key: value for key, value in vars(args).items()
                  if key != 'func'}
    args.func(**parameters)
